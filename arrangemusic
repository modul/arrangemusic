#!/usr/bin/python
# 
#  ARRANGEMUSIC.py
#
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <mo@liberejo.de> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return - Remo Giermann.
# ----------------------------------------------------------------------------
#
# create hierarchical directory structure of music files based on tag information.
#


__version = "v0.3.9"
__extensions = ["mp3", "ogg", "flac"]

### INIT ###

import sys, getopt, os, ConfigParser
import string, tagpy, commands
import shutil

def usage():
    print "USAGE: %s [OPTIONS] [-t TARGET_DIR] FILE|DIRECTORY" % (sys.argv[0])
    print "OPTIONS are:"
    print "-h            this text"
    print "-v/V          verbose mode on/off"
    print "-i/I          interactive mode on/off"
    print "-n/N          pretend/don't pretend actions"
    print "-m/M          move/copy FILE"
    print "-t TARGET_DIR specify target directory (default: ./)"
    print "-1            use path rewrite pattern for single artist media"
    print "-2            use path rewrite pattern for multi artist media"
    print "\narrangemusic %s written by Remo \"mo\" Giermann" % __version
    sys.exit(0)

try:
	cmdline = getopt.gnu_getopt(sys.argv[1:],'hmMNnt:vViI12')
except getopt.GetoptError:  # raised if getopt sees an undefined option
	usage()

user_cfg = os.path.expanduser("~/.arrangemusic.cfg")
system_cfg = "/etc/arrangemusic/config.cfg"
default_cfg = "/usr/local/share/arrangemusic/default.cfg"

config = ConfigParser.ConfigParser()

c = config.read([default_cfg, system_cfg, user_cfg])

if c:
    if c == [default_cfg]:
        print "No configuration file found. Creating", user_cfg
        shutil.copy(default_cfg, user_cfg)
else:
    print "Couldn't open any configuration file."
    print "Tried:", default_cfg, system_cfg, user_cfg
    sys.exit(1)

options       = cmdline[0]
__verbose     = config.getboolean("commandline", "verbose")
__do_it       = not config.getboolean("commandline", "pretend")
__use_moving  = config.getboolean("commandline", "move")
__ask_before  = config.getboolean("commandline", "interactive")
__multiartist = config.getboolean("commandline", "multiartist")
target_dir    = config.get("commandline", "target")

for item in options:
    option, arg = item
    if option == "-t":
        target_dir = arg
    elif option == "-h":
        usage()
    elif option == "-n":
        __do_it = False
    elif option == "-N":
        __do_it = True
    elif option == "-m":
        __use_moving = True
    elif option == "-M":
        __use_moving = False
    elif option == "-v":
        __verbose = True
    elif option == "-V":
        __verbose = False
    elif option == "-i":
        __ask_before = True
    elif option == "-I":
        __ask_before = False
    elif option == "-1":
        __multiartist = False
    elif option == "-2":
        __multiartist = True
            
if not os.path.isdir(target_dir):
	print "Target directory", target_dir, "does not exist!"
	sys.exit(1)

def clean(s):
    """Removes all 'kill'-characters and replaces them"""
    replacements  = eval(config.get("replacements", "replace"))

    for c in replacements.items():
        key, value = c
        s  = string.replace(s, key, value)
    
    return s 

def file_listing(directory):
	results = []
	for dirpath, dirs, files in os.walk(directory):
		for f in files:
			if f[-3:].lower() in __extensions:
				results.append(os.path.join(dirpath, f))
	return results

def process_file(sourcefile):
    extension = string.lower(sourcefile[-4:])
    extension = string.replace(extension, '.', '')
    tag       = tagpy.FileRef(sourcefile).tag()
    
    if not tag:
        print "Filetype of %s not supported." % sourcefile
        return

    artisttag   = tag.artist or config.get("replacements", "unknown_artist")
    albumtag    = tag.album
    titletag    = tag.title or config.get("replacements", "unknown_title")
    genretag    = tag.genre or config.get("replacements", "unknown_genre")
    track, year = tag.track, tag.year

    artist, album, title, genre = artisttag, albumtag, titletag, genretag

    # PREPARING FILE-/PATH-NAMES 

    if not artist.isupper():     # leave uppercase strings as they are (e.g. ABBA)
    	artist = artist.title()  # or convert 'bad religion' to 'Bad Religion'
    artist = clean(artist)

    if not title.isupper():
    	title  = title.title()
    title  = clean(title)
    
    if not genre.isupper():
    	genre  = genre.title()
    genre  = clean(genre)
    
    if album: # album has not to be set
    	if not album.isupper():
    		album  = album.title()
    	album  = clean(album)
    else: album = ''
    

    if __multiartist:
        pattern = "multiartist"
    else:
        pattern = "singleartist"

    if track: # maybe track isn't set
        track      = string.zfill(str(track), 2)
        trackstyle = config.get(pattern, "trackstyle")
    else:
        trackstyle = ''

    if year:
        yearstyle = config.get(pattern, "yearstyle")
    else:
        yearstyle = ''

    if album:
        albumstyle = config.get(pattern, "albumstyle")
    else:
        albumstyle = ''

   # Do the article ignoring if needed:

    first_letter = artist[0]

    if config.get(pattern, "ignore_articles"):
        artistsplit = artist.split("_")
        if len(artistsplit) >= 2:
            first_word, scnd_word = artistsplit[:2]
            for article in config.get(pattern,"common_articles").split(','):
                if first_word.lower() == article.lower():
                    first_letter = scnd_word[0]
                    break

    if first_letter in string.digits:
            c = config.get(pattern, "initial_of_number")
            if c == "whole":
                first_letter = scnd_word
            elif c == "first":
                pass
            elif c == "article":
                first_letter = first_word[0]
            else:
                first_letter = c

    escapes   = ('%a','%B','%b','%s','%T','%t','%g','%Y','%y','%I','%e')   # replace the escape things with data
    replcmnts = (artist, albumstyle, album, title, trackstyle, str(track) or '', genre, yearstyle, str(year) or '', first_letter, extension)

    path = config.get(pattern, "new_path")

    for i in range(0, len(escapes)):
        path = string.replace(path, escapes[i], replcmnts[i])

    file = os.path.basename(path)

    # DOING THE WORK

    if __verbose:	
    	print "FILE:", sourcefile, "\n"
    	print "FILE PATTERN  :", config.get(pattern, "new_path")
    	print "TRACK PATTERN :", config.get(pattern, "trackstyle")
    	print "YEAR PATTERN  :", config.get(pattern, "yearstyle")
    	print
        print "ARTIST : %s -> %s" % (artisttag, artist)
        print "ALBUM  : %s -> %s" % (albumtag, album)
        print "TITLE  : %s -> %s" % (titletag, title)
        print "GENRE  : %s -> %s" % (genretag, genre)
        print "TRACK  :", track
        print "TARGET :", target_dir
        print "DIR    :", os.path.dirname(path)
        print "FILE   : %s \n" % (file)

    path = os.path.join(target_dir, path)

    print sourcefile, "->\033[32m", path, "\033[0m"

    do_it = __do_it

    if __ask_before:
        answer = raw_input("Is that OK? [Y/n] ")
        if answer not in ('Y', 'y', ''):
            do_it = 0
            

    if do_it:
        _definitely_do_it = 1
        dir = os.path.dirname(path)
        if not os.path.isdir(dir):
            os.makedirs(dir)
        if os.path.isfile(path):
            if raw_input("File exists, overwrite? [N/y] ") not in ("y", "Y"):
                print "Not overwriting."
                _definitely_do_it = 0
        if _definitely_do_it:
                if __use_moving:
                    shutil.move(sourcefile, path)
                else:
                    shutil.copy(sourcefile, path)
    else: 
        print "Not done."


### MAIN CODE

myfiles = cmdline[1]

if not myfiles:
	usage()

print "\033[33m"

if not __do_it:
    print "Pretending actions (use -N to really do it)"
if __ask_before: 
    print "Working interactively (use -I to switch to non-interactive)"
if __verbose:
    print "Verbose operation (use -V to switch to non-verbose)" 
if __use_moving:
    print "Removing source files (use -M to keep them)"
if __multiartist:
    print "Using multiartist pattern (use -1 to overwrite)"

print "Target directory:", target_dir, "(change with -t DIRECTORY)"

print "\nSource(s):"
for i in myfiles:
	print i
print "\033[0m"


try:
	for myfile in myfiles:
		if os.path.isfile(myfile):
			# single file code
			process_file(myfile)

		elif os.path.isdir(myfile):
			# file listing, recursive operation
			listing = file_listing(myfile)
			for f in listing:
				process_file(f)

		else:
			print "Neither a file nor a directory:", myfile
			sys.exit(1)

except KeyboardInterrupt:
    print "\nTerminating..."
